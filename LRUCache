Q1. Design and implement a Least Recently Used (LRU) Cache. A cache has a fixed capacity, and when it exceeds that capacity, it must evict the least recently used item to make space for the new one.
Implement the following operations:
get(key): Return the value of the key if it exists in the cache, otherwise return -1.
put(key, value): Update or insert the value. If the cache is full, remove the least recently used item before inserting.
Function Signatures:
class LRUCache {
public:
    LRUCache(int capacity);
    int get(int key);
    void put(int key, int value);
};
Constraints:
1 <= capacity <= 3000
0 <= key, value <= 10^4
Maximum number of operations: 10^5
All operations must be done in O(1) time complexity.
Example:
Input:
LRUCache lru(2);  
lru.put(1, 1);
lru.put(2, 2);
lru.get(1);       
lru.put(3, 3);    
lru.get(2);       
lru.put(4, 4);    
lru.get(1);       
lru.get(3);       
lru.get(4); 

source code:

class LRUCache {
  private:
    class node {
      public:
      int key_;
      int val_;
      node * next;
      node * prev;
      node(int key, int val) {
        key_ = key;
        val_ = val;
      }
    };

  node * head = new node(-1, -1);
  node * tail = new node(-1, -1);

  int cap;
  unordered_map < int, node * > m;

  void addnode(node * newnode) {
    node * temp = head -> next;
    newnode -> next = temp;
    newnode -> prev = head;
    head -> next = newnode;
    temp -> prev = newnode;
  }

  void deletenode(node * delnode) {
    node * delprev = delnode -> prev;
    node * delnext = delnode -> next;
    delprev -> next = delnext;
    delnext -> prev = delprev;
  }

public:

  LRUCache(int capacity) {
    cap = capacity;
    head -> next = tail;
    tail -> prev = head;
  }

  int get(int key) {
    if (m.find(key) != m.end()) {
      node * resnode = m[key];
      int res = resnode -> val;
      m.erase(key);
      deletenode(resnode);
      addnode(resnode);
      m[key] = head -> next;
      return res;
    }

    return -1;
  }

  void put(int key, int value) {
    if (m.find(key) != m.end()) {
      node * existingnode = m[key];
      m.erase(key);
      deletenode(existingnode);
    }
    if (m.size() == cap) {
      m.erase(tail -> prev -> key_);
      deletenode(tail -> prev);
    }

    addnode(new node(key, value));
    m[key] = head -> next;
  }
};   



//input:
//LRUCache lru(2);
//lru.put(1, 1);
//lru.put(2, 2);
//cout << lru.get(1) << endl; // returns 1
//lru.put(3, 3);              // evicts key 2
//cout << lru.get(2) << endl; // returns -1 (not found)
//lru.put(4, 4);              // evicts key 1
//cout << lru.get(1) << endl; // returns -1 (not found)
//cout << lru.get(3) << endl; // returns 3
//cout << lru.get(4) << endl; // returns 4
